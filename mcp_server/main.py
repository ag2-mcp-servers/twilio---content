# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:56:09+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path, Query
from pydantic import conint, constr

from models import (
    ContentV1Content,
    ContentV1ContentApprovalFetch,
    V1ContentAndApprovalsGetResponse,
    V1ContentGetResponse,
    V1LegacyContentGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Content',
    version='1.42.0',
    servers=[{'url': 'https://content.twilio.com'}],
)


@app.get(
    '/v1/Content',
    description=""" Retrieve a list of Contents belonging to the account used to make the request """,
    tags=['content_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_content(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Content/{Sid}',
    description=""" Deletes a Content resource """,
    tags=['content_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_content(
    sid: constr(pattern=r'^HX[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Content/{Sid}',
    description=""" Fetch a Content resource by its unique Content Sid """,
    tags=['approval_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_content(
    sid: constr(pattern=r'^HX[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Content/{Sid}/ApprovalRequests',
    description=""" Fetch a Content resource's approval status by its unique Content Sid """,
    tags=['approval_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_approval_fetch(
    sid: constr(pattern=r'^HX[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/ContentAndApprovals',
    description=""" Retrieve a list of Contents with approval statuses belonging to the account used to make the request """,
    tags=['content_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_content_and_approvals(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/LegacyContent',
    description=""" Retrieve a list of Legacy Contents belonging to the account used to make the request """,
    tags=['content_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_legacy_content(
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
